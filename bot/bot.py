import asyncio
import telebot
from telebot.async_telebot import AsyncTeleBot, types

from data import storage
from secret import TOKEN

conn = storage.conn
cursor = storage.cursor

bot = AsyncTeleBot(TOKEN)


@bot.message_handler(commands=['start'])
async def start_message(message):
    await bot.reply_to(message, f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç!")


@bot.message_handler(content_types=["new_chat_members"])
async def hello_question(message):
    await bot.send_message(message.chat.id, "–ù–æ–≤–∏—á–∫–∞–º –ø—Ä–∏–≤–µ—Ç!")
    await bot.send_message(message.chat.id,
                           "–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã */help*",
                           parse_mode="markdown")


@bot.message_handler(commands=['leave'])
async def admins_message(message):
    cur = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if not cur.status in ['creator', 'administrator']:
        await bot.send_message(message.chat.id, "–ù–µ –∞–¥–º–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –ø—Ä–æ–≥–æ–Ω—è—Ç—å –±–æ—Ç–∞")
    else:
        await bot.send_message(message.chat.id, "–Ø —É—Ö–æ–∂—É")
        await bot.leave_chat(message.chat.id)


@bot.message_handler(commands=['stats'])
async def stats_message(message):
    admins = await bot.get_chat_administrators(message.chat.id)
    members = await bot.get_chat_members_count(message.chat.id)
    await bot.send_message(message.chat.id, "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    await bot.send_message(message.chat.id, "–≤—Å–µ–≥–æ: " + str(members))
    await bot.send_message(message.chat.id, "–∞–¥–º–∏–Ω–æ–≤: " + str(len(admins)))


@bot.message_handler(content_types=["sticker"])
async def ban_message(message):
    await bot.send_message(message.chat.id, "–°–¢–ò–ö–ï–†–´ –ó–ê–ü–†–ï–©–ï–ù–´!!!")
    chat = message.chat.type
    cur = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if cur.status in ['creator', 'administrator']:
        await bot.send_message(message.chat.id, "–ù–æ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –Ω–∞–∫–∞–∑—ã–≤–∞–µ–º")
    elif chat == "private":
        await bot.send_message(message.chat.id, "–ù–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –Ω–∞–∫–∞–∑—ã–≤–∞–µ–º")
    else:
        warning = cursor.execute(f'select Warnings from BannedUsers where ID = \'{message.from_user.id}\' and ChatID = \'{message.chat.id}\'').fetchone()
        if warning is not None:
            if warning[0] == 3:
                return
            warning = warning[0]
            cursor.execute(
                f'UPDATE BannedUsers SET Warnings = {warning + 1} WHERE ID = \'{message.from_user.id}\' and ChatID = \'{message.chat.id}\'')
            conn.commit()

            await bot.send_message(message.chat.id, "–ï—â–µ *" + str(3 - warning - 1) + "* ü§î –∏ *–±–∞–Ω*",
                                   parse_mode="markdown")
            if warning == 2:
                await bot.send_message(message.chat.id, "–¢–∞–∫ —á—Ç–æ –ø—Ä–æ—â–∞–π –Ω–∞–≤–µ—á–Ω–æ, @" + str(message.from_user.username))
                await bot.ban_chat_member(message.chat.id, message.from_user.id)
                cursor.execute(
                    f'UPDATE BannedUsers SET Banned = 1 WHERE ID = \'{message.from_user.id}\' and ChatID = \'{message.chat.id}\'')
                conn.commit()
        else:
            cursor.execute(
                'INSERT INTO BannedUsers (ID, Username, Warnings, Banned, ChatID) VALUES (?, ?, ?, ?, ?)',
                (message.from_user.id, message.from_user.username, 1, 0, message.chat.id))
            conn.commit()
            await bot.send_message(message.chat.id, "–ï—â–µ *2* ü§î –∏ *–±–∞–Ω*",
                                   parse_mode="markdown")


@bot.message_handler(commands=['my_warnings'])
async def warnings_message(message):
    warning = cursor.execute(f'select Warnings from BannedUsers where ID = \'{message.from_user.id}\' and ChatID = \'{message.chat.id}\'').fetchone()
    if warning is None:
        await bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π üéâ")
    else:
        await bot.send_message(message.chat.id, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: " + str(warning[0]))


@bot.message_handler(commands=['unban'])
async def unban_message(message):
    to_be_unbanned = ' '.join(message.text.split()[1:])
    cur = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if not cur.status in ['creator', 'administrator']:
        await bot.send_message(message.chat.id, "–ù–µ –∞–¥–º–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç —Å–Ω—è—Ç—å –±–∞–Ω")
    elif to_be_unbanned == "":
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
    else:
        is_banned = cursor.execute(
            f'select Banned from BannedUsers where Username = \'{to_be_unbanned}\' and ChatID = \'{message.chat.id}\'').fetchone()
        if is_banned is None or is_banned[0] == 0:
            await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω-–±–∞–∑–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
        else:
            await bot.unban_chat_member(message.chat.id, cursor.execute(
                f'select ID from BannedUsers where Username = \'{to_be_unbanned}\' and ChatID = \'{message.chat.id}\'').fetchone()[0])
            await bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å {to_be_unbanned} –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ —á–∞—Ç")

            cursor.execute(f'DELETE FROM BannedUsers WHERE Username = \'{to_be_unbanned}\' and ChatID = \'{message.chat.id}\'')
            conn.commit()


@bot.message_handler(commands=['help'])
async def help_message(message):
    await bot.send_message(message.chat.id, "–î–ª—è –≤—Å–µ—Ö")
    await bot.send_message(message.chat.id, '''–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞: */help*
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞: */stats*
–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º: */can_i_be_admin*
–°–ª–æ–≤–∏—Ç—å –±–∞–Ω –º–æ–∂–Ω–æ –∑–∞ –ø–æ—Å—ã–ª–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤ üòî
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: */my_warnings*''', parse_mode="markdown")
    await bot.send_message(message.chat.id, "–î–ª—è –∞–¥–º–∏–Ω–æ–≤")
    await bot.send_message(message.chat.id, '''–ó–∞—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞ —É–π—Ç–∏: */leave*
–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: */unban username*''', parse_mode="markdown")


@bot.message_handler(commands=['can_i_be_admin'])
async def can_i_be_admin_message(message):
    cur = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if cur.status in ['creator', 'administrator']:
        await bot.send_message(message.chat.id, "@" + str(message.from_user.username) + " —É–∂–µ –∞–¥–º–∏–Ω")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        item_1 = types.KeyboardButton("! –ë–æ—Ç, —Ä–∞–∑—Ä–µ—à–∏ !")
        item_2 = types.KeyboardButton("! –ë–æ—Ç, –æ—Ç–∫–∞–∂–∏ !")
        markup.add(item_1, item_2)
        await bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å @" + str(
            message.from_user.username) + " –≤ –∞–¥–º–∏–Ω—ã?", reply_markup=markup)

        @bot.message_handler(content_types=["text"])
        async def can_i_be_admin_answer(answer, tmp_id=message.from_user.id,
                                        tmp_name=message.from_user.username):
            cur = await bot.get_chat_member(answer.chat.id, answer.from_user.id)
            if not cur.status in ['creator', 'administrator']:
                await bot.send_message(answer.chat.id, "–£ @" + str(
                    answer.from_user.username) + " –Ω–µ—Ç –ø—Ä–∞–≤ –¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")
            else:
                if answer.text == "! –ë–æ—Ç, —Ä–∞–∑—Ä–µ—à–∏ !":
                    await bot.promote_chat_member(answer.chat.id, tmp_id, True)
                    await bot.send_message(answer.chat.id, "@" + str(
                        tmp_name) + " —Ç–µ–ø–µ—Ä—å –≤ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–æ–≤!")
                elif answer.text == "! –ë–æ—Ç, –æ—Ç–∫–∞–∂–∏ !":
                    await bot.send_message(answer.chat.id, "–û—Ç–∫–∞–∑–∞–Ω–æ")


async def main():
    await bot.set_my_commands([
        types.BotCommand("/start", "starts the bot"),
        types.BotCommand("/help", "shows bot's commands"),
        types.BotCommand("/stats", "shows chat's statistics"),
        types.BotCommand("/can_i_be_admin", "ask for admin rights"),
        types.BotCommand("/my_warnings", "shows user's warnings"),
        types.BotCommand("/leave", "makes bot leave the chat"),
        types.BotCommand("/unban", "unbans user")
    ])
    await asyncio.gather(bot.infinity_polling())


if __name__ == '__main__':
    asyncio.run(main())
